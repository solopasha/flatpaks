name: Build and push

on:
  workflow_dispatch:
    inputs:
      appids:
        type: string
        description: app IDs to build
  push:
    paths-ignore:
      - '.github/workflows/*'
    branches:
      - master
  pull_request:

jobs:
  builds:
    name: Assemble build matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.builds.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed manifests
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        id: changed_files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c
        with:
          files: |
            */*.yml
            */*.yaml
            */*.json

      - name: Assemble build matrix
        id: builds
        run: |
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            IFS=' ' read -r -a APPS <<< "${{ steps.changed_files.outputs.all_changed_files }}"
            echo "Building changed manifests: ${APPS[@]}"
          elif [[ "${{ inputs.appids }}" != "" ]]; then
            APPS_TO_BUILD=(${{ inputs.appids }})
            declare -a APPS=()
            for appid in "${APPS_TO_BUILD[@]}"; do
              APPS+=($(find . -maxdepth 2 \( -iname "${appid}.yaml" -o -iname "${appid}.yml" -o -iname "${appid}.json" \)))
            done
            echo "Building specified apps: $APPS"
          else
            mapfile -t APPS < <(find . -maxdepth 2 \( -iname "*.yaml" -o -iname "*.yml" -o -iname "*.json" \))
            echo -e "Building all apps:\n$APPS"
          fi

          APPS_JSON='{"app": []}'
          for manifest in "${APPS[@]}"; do
            APPID=$(basename ${manifest%.*})
            DIRNAME=$(dirname ${manifest#./})
            case "$manifest" in
              *.json)
                BRANCH=$(jq -r '.branch // "master"' "$manifest")
                ;;
              *.yml|*.yaml)
                BRANCH=$(yq '.branch // "master"' "$manifest")
                ;;
              *)
                exit 1
                ;;
            esac
            APPS_JSON=$(jq -c --arg appid "$APPID" --arg manifest "$manifest" \
              --arg dirname "$DIRNAME" --arg branch "$BRANCH" \
              '.app += [{"appid": $appid, "manifest": $manifest, "dirname": $dirname, "branch": $branch}]' <<< "$APPS_JSON")
          done
          echo "$APPS_JSON"

          echo "matrix=$APPS_JSON" >> $GITHUB_OUTPUT

  flatpak:
    name: ${{ matrix.app.dirname }} build
    runs-on: ubuntu-latest
    needs: builds
    permissions:
      contents: read
    container:
      image: registry.fedoraproject.org/fedora:latest
      options: --privileged
    strategy:
      matrix: ${{fromJson(needs.builds.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Prepare
        run: |
          dnf -y up && dnf -y install --setopt=install_weak_deps=False \
            ccache \
            flatpak-builder \
            git-core \
            patch \
            zstd
          flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Restore cache
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: .flatpak-builder
          key: ${{ matrix.app.appid }}-${{ hashFiles(format('{0}', matrix.app.appid)) }}
          restore-keys: ${{ matrix.app.appid }}-

      - name: Key
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          GPGKEY: ${{ secrets.GPGKEY }}
        run: |
          echo "$GPGKEY" > ${{ github.repository_owner }}.private
          gpg --import ${{ github.repository_owner }}.private
          rm ${{ github.repository_owner }}.private

      - name: Download sources
        run: |
          max_retries=5
          sleep_seconds=7

          for (( retry_count=0; retry_count<max_retries; retry_count++ )); do
              if flatpak-builder --force-clean --sandbox --download-only builddir ${{ matrix.app.manifest }}; then
                  exit 0
              fi

              if [[ $retry_count -lt $((max_retries - 1)) ]]; then
                  echo "Attempt $((retry_count + 1)) failed. Retrying in $sleep_seconds seconds..."
                  sleep $sleep_seconds
              fi
          done

          echo "Failed after $max_retries attempts"
          exit 1

      - name: Build
        run: |
          if [[ ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" ]]; then
            gpgsign="--gpg-sign=${{ vars.FINGERPRINT }}"
          else
            gpgsign=""
          fi

          flatpak-builder \
            --arch=x86_64 \
            --ccache \
            --default-branch=master \
            --delete-build-dirs \
            --disable-download \
            --disable-rofiles-fuse \
            --force-clean \
            --install-deps-from=flathub \
            --repo=repo \
            --sandbox \
            $gpgsign \
            builddir ${{ matrix.app.manifest }}

          flatpak build-bundle repo ${{ matrix.app.dirname }}.flatpak \
            --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo \
            --arch=x86_64 \
            $gpgsign \
            ${{ matrix.app.appid }} ${{ matrix.app.branch }}

          flatpak build-bundle repo ${{ matrix.app.dirname }}.Debug.flatpak \
            --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo \
            --arch=x86_64 \
            $gpgsign \
            --runtime \
            ${{ matrix.app.appid }}.Debug ${{ matrix.app.branch }}

      - name: Prune debuginfo from repo
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          for ref in $(ostree refs --repo=repo | grep '^runtime.*Debug'); do
              ostree refs --repo=repo --delete "$ref"
          done
          flatpak build-update-repo --generate-static-deltas --prune repo/ --gpg-sign=dc812d3cb7855746

      - name: Upload repo as artifact
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          path: repo
          name: ${{ matrix.app.dirname }}_repo_artifact
          retention-days: 1
          compression-level: 0

      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app.dirname }}-bundle
          path: ${{ matrix.app.dirname }}.flatpak
          retention-days: 1
          compression-level: 0

      - name: Upload debuginfo
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app.dirname }}-bundle.Debug
          path: ${{ matrix.app.dirname }}.Debug.flatpak
          retention-days: 3
          compression-level: 0

      - name: Save cache
        id: cache-save
        uses: actions/cache/save@v4
        if: always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        with:
          path: .flatpak-builder
          key: ${{ steps.cache.outputs.cache-primary-key }}

  deploy:
    if: ( github.event_name == 'push' || github.event_name == 'workflow_dispatch' ) && github.ref == 'refs/heads/master'
    needs: flatpak
    permissions:
      pages: write
      id-token: write
    container:
      image: registry.fedoraproject.org/fedora:latest
      options: --privileged
    concurrency:
      group: repo-update
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        run: |
          dnf -y up && dnf -y install --setopt=install_weak_deps=False \
            ccache \
            flatpak-builder \
            git-core \
            patch \
            zstd
          flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

      - name: Key
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          GPGKEY: ${{ secrets.GPGKEY }}
        run: |
          echo "$GPGKEY" > ${{ github.repository_owner }}.private
          gpg --import ${{ github.repository_owner }}.private
          rm ${{ github.repository_owner }}.private

      - uses: actions/checkout@v4

      - name: Cache repo
        id: cache
        uses: actions/cache@v4
        with:
          path: repo
          key: repo-${{ github.sha }}
          restore-keys: repo-

      - name: Download repo
        if: steps.cache.outputs.cache-hit == ''
        run: |
          mkdir repo
          pushd repo
          ostree init --repo . --mode=archive-z2
          ostree remote add ${{ github.repository_owner }} \
            https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }} \
            --gpg-import=../RPM-GPG-KEY-${{ github.repository_owner }}
          ostree pull --disable-fsync --mirror ${{ github.repository_owner }}

      - name: Grab build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*_repo_artifact"
          path: repo
          merge-multiple: true

      - name: flatpakrepo
        run: |
          cat << EOF > repo/index.flatpakrepo
          [Flatpak Repo]
          Title=${{ github.repository }}
          Url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
          Homepage=${{ github.repositoryUrl }}
          Description=${{ github.repository }}
          Icon=https://raw.githubusercontent.com/flatpak/flatpak/main/flatpak.png
          GPGKey=$(base64 --wrap=0 < RPM-GPG-KEY-${{ github.repository_owner }})
          EOF

      - name: Update repo metadata
        run: |
          mkdir -p repo/refs/remotes
          flatpak build-update-repo --generate-static-deltas --prune repo/ --gpg-sign=dc812d3cb7855746

      - name: Upload repo
        uses: actions/upload-pages-artifact@v3
        with:
          path: repo/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  merge:
    name: Merge PR
    if: github.event_name == 'pull_request' && github.actor == 'solopasha'
    runs-on: ubuntu-latest
    needs: flatpak
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Merge Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          for i in {1..5}; do
            gh pr merge --rebase ${{ github.event.pull_request.html_url }} && break || sleep $((5 * i))
          done
